{"ast":null,"code":"import React, { Fragment, useContext, useEffect } from \"react\";\nimport { DashboardContext } from \"./\";\nimport { uploadImage, sliderImages, deleteImage } from \"./Action\";\nconst apiURL = process.env.REACT_APP_API_URL;\nconst Customize = () => {\n  const {\n    data,\n    dispatch\n  } = useContext(DashboardContext);\n  return {/* \r\n          <Fragment>\r\n           <div className=\"m-4 md:w-1/2\">\r\n             {!data.uploadSliderBtn ? (\r\n               <div\r\n                 onClick={(e) =>\r\n                   dispatch({\r\n                     type: \"uploadSliderBtn\",\r\n                     payload: !data.uploadSliderBtn,\r\n                   })\r\n                 }\r\n                 style={{ background: \"#303031\" }}\r\n                 className=\"cursor-pointer rounded-full p-2 flex items-center justify-center text-gray-100 text-sm font-semibold uppercase\"\r\n               >\r\n                 <svg\r\n                   className=\"w-6 h-6 text-gray-100 mr-2\"\r\n                   fill=\"currentColor\"\r\n                   viewBox=\"0 0 20 20\"\r\n                   xmlns=\"http://www.w3.org/2000/svg\"\r\n                 >\r\n                   <path\r\n                     fillRule=\"evenodd\"\r\n                     d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\"\r\n                     clipRule=\"evenodd\"\r\n                   />\r\n                 </svg>\r\n                 Customize Slider Image\r\n               </div>\r\n             ) : (\r\n               \"\"\r\n             )}\r\n           </div>\r\n           {data.uploadSliderBtn ? <UploadImageSection /> : \"\"}\r\n          </Fragment>\r\n          );\r\n          };\r\n          const UploadImageSection = () => {\r\n          const { data, dispatch } = useContext(DashboardContext);\r\n          const uploadImageHandler = (image) => {\r\n          uploadImage(image, dispatch);\r\n          };\r\n          return (\r\n          <Fragment>\r\n           <div className=\"relative m-4 bg-white p-4 shadow-lg\">\r\n             <h1 className=\"border-b-2 border-yellow-700 mb-4 pb-2 text-2xl font-semibold\">\r\n               Site Slider Images\r\n             </h1>\r\n             <div className=\"relative flex flex-col space-y-2\">\r\n               <div\r\n                 style={{ background: \"#303031\" }}\r\n                 className=\"relative z-0 px-4 py-2 rounded text-white flex justify-center space-x-2 md:w-4/12\"\r\n               >\r\n                 <svg\r\n                   className=\"w-6 h-6\"\r\n                   fill=\"none\"\r\n                   stroke=\"currentColor\"\r\n                   viewBox=\"0 0 24 24\"\r\n                   xmlns=\"http://www.w3.org/2000/svg\"\r\n                 >\r\n                   <path\r\n                     strokeLinecap=\"round\"\r\n                     strokeLinejoin=\"round\"\r\n                     strokeWidth={2}\r\n                     d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n                   />\r\n                 </svg>{\" \"}\r\n                 <span>Upload File</span>\r\n               </div>\r\n               <input\r\n                 onChange={(e) => uploadImageHandler(e.target.files[0])}\r\n                 name=\"image\"\r\n                 accept=\".jpg, .png, .jpeg, .gif, .bmp, .tif, .tiff|image/*\"\r\n                 className=\"absolute z-10 opacity-0 bg-gray-100\"\r\n                 type=\"file\"\r\n                 id=\"image\"\r\n               />\r\n             </div>\r\n             <span\r\n               onClick={(e) =>\r\n                 dispatch({\r\n                   type: \"uploadSliderBtn\",\r\n                   payload: !data.uploadSliderBtn,\r\n                 })\r\n               }\r\n               style={{ background: \"#303031\" }}\r\n               className=\"cursor-pointer absolute top-0 right-0 m-4 rounded-full p-1\"\r\n             >\r\n               <svg\r\n                 className=\"w-6 h-6 text-white\"\r\n                 fill=\"none\"\r\n                 stroke=\"currentColor\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 xmlns=\"http://www.w3.org/2000/svg\"\r\n               >\r\n                 <path\r\n                   strokeLinecap=\"round\"\r\n                   strokeLinejoin=\"round\"\r\n                   strokeWidth={2}\r\n                   d=\"M6 18L18 6M6 6l12 12\"\r\n                 />\r\n               </svg>\r\n             </span>\r\n             <AllImages />\r\n           </div>\r\n          </Fragment>\r\n          );\r\n          };\r\n          const AllImages = () => {\r\n          const { data, dispatch } = useContext(DashboardContext);\r\n          useEffect(() => {\r\n          sliderImages(dispatch);\r\n          // eslint-disable-next-line react-hooks/exhaustive-deps\r\n          }, []);\r\n          const deleteImageReq = (id) => {\r\n          deleteImage(id, dispatch);\r\n          };\r\n          return (\r\n          <Fragment>\r\n           {data.imageUpload ? (\r\n             <div className=\"flex items-center justify-center p-8\">\r\n               <svg\r\n                 className=\"w-12 h-12 animate-spin text-gray-600\"\r\n                 fill=\"none\"\r\n                 stroke=\"currentColor\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 xmlns=\"http://www.w3.org/2000/svg\"\r\n               >\r\n                 <path\r\n                   strokeLinecap=\"round\"\r\n                   strokeLinejoin=\"round\"\r\n                   strokeWidth=\"2\"\r\n                   d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\r\n                 ></path>\r\n               </svg>\r\n             </div>\r\n           ) : (\r\n             \"\"\r\n           )}\r\n           <div className=\"grid grid-cols-1 md:grid md:grid-cols-2 lg:grid-cols-3 my-4\">\r\n             {data.sliderImages.length > 0 ? (\r\n               data.sliderImages.map((item, index) => {\r\n                 return (\r\n                   <div key={index} className=\"relative col-span-1 m-2 border\">\r\n                     <img\r\n                       className=\"w-full md:h-32 object-center object-cover\"\r\n                       src={`${apiURL}/uploads/customize/${item.slideImage}`}\r\n                       alt=\"sliderImages\"\r\n                     />\r\n                     <span\r\n                       onClick={(e) => deleteImageReq(item._id)}\r\n                       style={{ background: \"#303031\" }}\r\n                       className=\"absolute top-0 right-0 m-1 text-white cursor-pointer rounded-full p-1\"\r\n                     >\r\n                       <svg\r\n                         className=\"w-6 h-6\"\r\n                         fill=\"none\"\r\n                         stroke=\"currentColor\"\r\n                         viewBox=\"0 0 24 24\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\"\r\n                       >\r\n                         <path\r\n                           strokeLinecap=\"round\"\r\n                           strokeLinejoin=\"round\"\r\n                           strokeWidth={2}\r\n                           d=\"M6 18L18 6M6 6l12 12\"\r\n                         />\r\n                       </svg>\r\n                     </span>\r\n                   </div>\r\n                 );\r\n               })\r\n             ) : (\r\n               <div className=\"col-span-1 md:col-span-2 lg:col-span-3 text-center text-xl font-light w-full bg-orange-200 rounded py-2\">\r\n                 No slide image found\r\n               </div>\r\n             )}\r\n           </div>\r\n          </Fragment>\r\n          */};\n};\nexport default Customize;","map":{"version":3,"names":["React","Fragment","useContext","useEffect","DashboardContext","uploadImage","sliderImages","deleteImage","apiURL","process","env","REACT_APP_API_URL","Customize","data","dispatch"],"sources":["D:/mern_projects/organ_donation_mern/Organ_Donate/client/src/components/admin/dashboardAdmin/Customize.js"],"sourcesContent":["import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { DashboardContext } from \"./\";\r\nimport { uploadImage, sliderImages, deleteImage } from \"./Action\";\r\n\r\nconst apiURL = process.env.REACT_APP_API_URL;\r\n\r\nconst Customize = () => {\r\n  const { data, dispatch } = useContext(DashboardContext);\r\n\r\n  return (\r\n    {/* \r\n    <Fragment>\r\n      <div className=\"m-4 md:w-1/2\">\r\n        {!data.uploadSliderBtn ? (\r\n          <div\r\n            onClick={(e) =>\r\n              dispatch({\r\n                type: \"uploadSliderBtn\",\r\n                payload: !data.uploadSliderBtn,\r\n              })\r\n            }\r\n            style={{ background: \"#303031\" }}\r\n            className=\"cursor-pointer rounded-full p-2 flex items-center justify-center text-gray-100 text-sm font-semibold uppercase\"\r\n          >\r\n            <svg\r\n              className=\"w-6 h-6 text-gray-100 mr-2\"\r\n              fill=\"currentColor\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\"\r\n                clipRule=\"evenodd\"\r\n              />\r\n            </svg>\r\n            Customize Slider Image\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      {data.uploadSliderBtn ? <UploadImageSection /> : \"\"}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst UploadImageSection = () => {\r\n  const { data, dispatch } = useContext(DashboardContext);\r\n\r\n  const uploadImageHandler = (image) => {\r\n    uploadImage(image, dispatch);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"relative m-4 bg-white p-4 shadow-lg\">\r\n        <h1 className=\"border-b-2 border-yellow-700 mb-4 pb-2 text-2xl font-semibold\">\r\n          Site Slider Images\r\n        </h1>\r\n        <div className=\"relative flex flex-col space-y-2\">\r\n          <div\r\n            style={{ background: \"#303031\" }}\r\n            className=\"relative z-0 px-4 py-2 rounded text-white flex justify-center space-x-2 md:w-4/12\"\r\n          >\r\n            <svg\r\n              className=\"w-6 h-6\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n              />\r\n            </svg>{\" \"}\r\n            <span>Upload File</span>\r\n          </div>\r\n          <input\r\n            onChange={(e) => uploadImageHandler(e.target.files[0])}\r\n            name=\"image\"\r\n            accept=\".jpg, .png, .jpeg, .gif, .bmp, .tif, .tiff|image/*\"\r\n            className=\"absolute z-10 opacity-0 bg-gray-100\"\r\n            type=\"file\"\r\n            id=\"image\"\r\n          />\r\n        </div>\r\n        <span\r\n          onClick={(e) =>\r\n            dispatch({\r\n              type: \"uploadSliderBtn\",\r\n              payload: !data.uploadSliderBtn,\r\n            })\r\n          }\r\n          style={{ background: \"#303031\" }}\r\n          className=\"cursor-pointer absolute top-0 right-0 m-4 rounded-full p-1\"\r\n        >\r\n          <svg\r\n            className=\"w-6 h-6 text-white\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M6 18L18 6M6 6l12 12\"\r\n            />\r\n          </svg>\r\n        </span>\r\n        <AllImages />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst AllImages = () => {\r\n  const { data, dispatch } = useContext(DashboardContext);\r\n\r\n  useEffect(() => {\r\n    sliderImages(dispatch);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const deleteImageReq = (id) => {\r\n    deleteImage(id, dispatch);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {data.imageUpload ? (\r\n        <div className=\"flex items-center justify-center p-8\">\r\n          <svg\r\n            className=\"w-12 h-12 animate-spin text-gray-600\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className=\"grid grid-cols-1 md:grid md:grid-cols-2 lg:grid-cols-3 my-4\">\r\n        {data.sliderImages.length > 0 ? (\r\n          data.sliderImages.map((item, index) => {\r\n            return (\r\n              <div key={index} className=\"relative col-span-1 m-2 border\">\r\n                <img\r\n                  className=\"w-full md:h-32 object-center object-cover\"\r\n                  src={`${apiURL}/uploads/customize/${item.slideImage}`}\r\n                  alt=\"sliderImages\"\r\n                />\r\n                <span\r\n                  onClick={(e) => deleteImageReq(item._id)}\r\n                  style={{ background: \"#303031\" }}\r\n                  className=\"absolute top-0 right-0 m-1 text-white cursor-pointer rounded-full p-1\"\r\n                >\r\n                  <svg\r\n                    className=\"w-6 h-6\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M6 18L18 6M6 6l12 12\"\r\n                    />\r\n                  </svg>\r\n                </span>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div className=\"col-span-1 md:col-span-2 lg:col-span-3 text-center text-xl font-light w-full bg-orange-200 rounded py-2\">\r\n            No slide image found\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n    */}\r\n  );\r\n};\r\n\r\nexport default Customize;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,gBAAgB,QAAQ,IAAI;AACrC,SAASC,WAAW,EAAEC,YAAY,EAAEC,WAAW,QAAQ,UAAU;AAEjE,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE5C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAM;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGZ,UAAU,CAACE,gBAAgB,CAAC;EAEvlLK,CAyLE;AAEP,CAAC;AAED,eAAeQ,SAAS"},"metadata":{},"sourceType":"module"}